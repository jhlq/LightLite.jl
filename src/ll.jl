include("screen.jl")

function toffoli!(ps::Photons,cct::Array{Int})
	apply!(ps,cct[3],H)
	apply!(ps,[cct[2],cct[3]],cnot)
	apply!(ps,cct[3],Tdg)
	apply!(ps,[cct[1],cct[3]],cnot)
	apply!(ps,cct[3],T)
	apply!(ps,[cct[2],cct[3]],cnot)
	apply!(ps,cct[3],Tdg)
	apply!(ps,[cct[1],cct[3]],cnot)
	apply!(ps,cct[2],Tdg)
	apply!(ps,cct[3],T)
	apply!(ps,[cct[1],cct[2]],cnot)
	apply!(ps,cct[3],H)
	apply!(ps,cct[2],Tdg)
	apply!(ps,[cct[1],cct[2]],cnot)
	apply!(ps,cct[1],T)
	apply!(ps,cct[2],S)
end

components=Dict{String,Component}()
components["X"]=Gate((0,0,0),[],[],(state::Photons,photons::Array{Int})->makemat(state.n,photons,X),(b::Board,photons::Array{Int})->deleteat!(photons,1:length(photons)),"X")
components["Y"]=Gate((0,0,0),[],[],(state::Photons,photons::Array{Int})->makemat(state.n,photons,Y),(b::Board,photons::Array{Int})->deleteat!(photons,1:length(photons)),"Y")
components["Z"]=Gate((0,0,0),[],[],(state::Photons,photons::Array{Int})->makemat(state.n,photons,Z),(b::Board,photons::Array{Int})->deleteat!(photons,1:length(photons)),"Z")
components["H"]=Gate((0,0,0),[],[],(state::Photons,photons::Array{Int})->makemat(state.n,photons,H),(b::Board,photons::Array{Int})->deleteat!(photons,1:length(photons)),"H")
components["cnot"]=Gate((0,0,0),[],[],(state::Photons,photons::Array{Int})->length(photons)>1 ? cnot(photons,state) : 1,(b::Board,photons::Array{Int})->length(photons)>1 ? (b.photons[photons[1]].trapped=0;deleteat!(photons,1:length(photons))) : b.photons[photons[1]].trapped=9999,"⊕")
components["Measure"]=Measure((0,0,0),[],[],"∡")
components["Emitter"]=newEmitter()
components["Mirror"]=newMirror()
